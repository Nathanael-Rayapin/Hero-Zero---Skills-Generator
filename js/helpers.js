const helpers = {
    /* Display or Hide button Confirm */
    displayOrHide: function () {
        if (app.objectView && app?.objectView.querySelectorAll('.object-box').length > 0) {
            app.btnGenerator.style.display = 'block';
        } else {
            app.btnGenerator.style.display = 'none';
        }
    },

    // Update Objects Positions
    updateObjectPosition: function () {
        if (!app.objectView) {
            return;
        }
        const objectNumber = app.objectView.querySelectorAll('.object-box');
        if (objectNumber.length < 8) {
            objectNumber.forEach((box) => {
                box.classList.add('me-3');
            })
            app.objectView.classList.remove('justify-content-center');
        } else {
            objectNumber.forEach((box) => {
                box.classList.remove('me-3');
            })
            app.objectView.classList.add('justify-content-center');
        }
    },

    // Add or Remove object depending on User response
    addOrRemoveObjectBox: function (value) {
        /* If Boxes doesn't exist, create Box depending on input value*/
        if (!(app?.objectView)) {
            for (let index = 0; index < value; index++) {
                app.createObjectBox(index + 1);
            }
            return;
        };

        /* If current Boxes exists, backgroundColor back to Default */
        helpers.backToDefaultColor();

        const numberCurrentBox = app?.objectView.querySelectorAll('.object-box').length;
        /* If current Boxes exists and is highter than entered Value, remove */
        if (numberCurrentBox > value) {
            const differenciesValue = numberCurrentBox - value;
            app?.objectView.querySelectorAll(`.object-box:nth-last-child(-n+${differenciesValue})`).forEach((box) => {
                box.remove();
            })
            /* Else, add */
        } else {
            for (let index = numberCurrentBox; index < value; index++) {
                app.createObjectBox(index + 1);
            }
        }
    },

    // Apply Default BackgroundColor
    backToDefaultColor: function () {
        const backgroundToDefault = app?.objectView.querySelectorAll('.object-box');
        backgroundToDefault.forEach((box) => {
            box.style.background = 'linear-gradient(#404447, #23272b)';
        });
    },

    // Calculate Differences between Stats generate and User stats
    calcDifferencesStats: function() {
        /* Stats Generated by Generator (innerText) */
        const results = [];
        results.push(document.getElementById('resultStrength'));
        results.push(document.getElementById('resultCondition'));
        results.push(document.getElementById('resultBrain'));
        results.push(document.getElementById('resultInsight'));

        /* Stats Entered by User (Number) */
        const statsObjects = [];
        statsObjects.push(document.getElementById('strengthBy'));
        statsObjects.push(document.getElementById('conditionBy'));
        statsObjects.push(document.getElementById('brainBy'));
        statsObjects.push(document.getElementById('insightBy'));

        for (const stat of statsObjects) {
            if(isNaN(parseInt(stat.value)) || stat.value === '') {
                console.log("Error");
                return;
            }
        };

        /* Stats Differencesby Calculation (innerText) */
        const differences = [];
        differences.push(document.getElementById('differencesStrength'));
        differences.push(document.getElementById('differencesCondition'));
        differences.push(document.getElementById('differencesBrain'));
        differences.push(document.getElementById('differencesInsight'));

        for (let i = 0; i < differences.length; i++) {
            /* If User object is Higher => Negative Value */
            if(Math.sign(parseInt(statsObjects[i].value) - parseInt(results[i].innerHTML)) === 1) {
                differences[i].innerText = `-${(parseInt(statsObjects[i].value) - parseInt(results[i].innerHTML)).toString()}`;
                differences[i].classList.add('text-danger');
            /* If User object is Lower => Positive Value */
            /* We had to Cast the sign beacause it's interpreted */
            } else if (Math.sign(parseInt(statsObjects[i].value) - parseInt(results[i].innerHTML)) === -1) {
                const formatValue = `${(parseInt(statsObjects[i].value) - parseInt(results[i].innerHTML)).toString()}`;
                differences[i].innerText = `+${formatValue.slice(1)}`;
                differences[i].classList.add('text-success');
            } else {
                differences[i].innerText = `0`;
                differences[i].classList.add('text-dark');
            }
        }
    },

    // Check Input are Filled
    checkinputFilled: function() {
        let newError = false;

        const statsObjects = [];
        statsObjects.push(document.getElementById('strengthBy'));
        statsObjects.push(document.getElementById('conditionBy'));
        statsObjects.push(document.getElementById('brainBy'));
        statsObjects.push(document.getElementById('insightBy'));

        for (const stat of statsObjects) {
            if(isNaN(parseInt(stat.value)) || stat.value === '') {
                newError = true;
            }
        };

        if(newError) {
            return 'ERROR';
        }
    }
}